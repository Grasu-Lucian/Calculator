{"version":3,"sources":["DigitButton.js","OperationButton.js","App.js","index.js"],"names":["DigitButton","dispatch","digit","onClick","type","ACTIONS","ADD_DIGIT","payload","OperationButton","operation","CHOOSE_OPERATION","CLEAR","DELETE_DIGIT","EVALUATE","reducer","state","overwrite","currentOperand","includes","previousOperand","evaluate","lenght","slice","prev","parseFloat","current","isNaN","computation","toString","App","useReducer","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4fba0d0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { ACTIONS } from \"./App\";\r\nexport default function DigitButton({ dispatch, digit }) {\r\n  return (\r\n    <button\r\n      onClick={() => {\r\n        dispatch({ type: ACTIONS.ADD_DIGIT, payload: { digit } });\r\n      }}\r\n    >\r\n      {digit}\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { ACTIONS } from \"./App\";\r\nexport default function OperationButton({ dispatch, operation }) {\r\n  return (\r\n    <button\r\n      onClick={() => {\r\n        dispatch({ type: ACTIONS.CHOOSE_OPERATION, payload: { operation } });\r\n      }}\r\n    >\r\n      {operation}\r\n    </button>\r\n  );\r\n}\r\n","import { useReducer } from \"react\";\nimport DigitButton from \"./DigitButton\";\nimport OperationButton from \"./OperationButton\";\nexport const ACTIONS = {\n  ADD_DIGIT: \"add-digit\",\n  CHOOSE_OPERATION: \"choose\",\n  CLEAR: \"clear\",\n  DELETE_DIGIT: \"delete-digit\",\n  EVALUATE: \"evaluate\",\n};\nfunction reducer(state, { type, payload }) {\n  switch (type) {\n    case ACTIONS.ADD_DIGIT:\n      if (state.overwrite) {\n        return {\n          ...state,\n          overwrite: false,\n          currentOperand: `${payload.digit}`,\n        };\n      }\n      if (payload.digit === \"0\" && state.currentOperand === \"0\") return state;\n      if (payload.digit === \".\" && state.currentOperand.includes(\".\"))\n        return state;\n      return {\n        ...state,\n        currentOperand: `${state.currentOperand || \"\"}${payload.digit}`,\n      };\n    case ACTIONS.CLEAR:\n      return {};\n    case ACTIONS.CHOOSE_OPERATION:\n      if (state.currentOperand === null && state.previousOperand == null) {\n        return state;\n      }\n      if (state.currentOperand === null) {\n        return {\n          ...state,\n          operation: payload.operation,\n        };\n      }\n      if (state.previousOperand === null) {\n        return {\n          ...state,\n          operation: payload.operation,\n          previousOperand: state.currentOperand,\n          currentOperand: null,\n        };\n      }\n      return {\n        ...state,\n        previousOperand: evaluate(state),\n        operation: payload.operation,\n        currentOperand: null,\n      };\n    case ACTIONS.EVALUATE:\n      if (\n        state.operation == null ||\n        state.currentOperand == null ||\n        state.previousOperand == null\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        overwrite: true,\n        currentOperand: evaluate(state),\n        previousOperand: null,\n        operation: null,\n      };\n    case ACTIONS.DELETE_DIGIT:\n      if (state.overwrite) {\n        return { ...state, overwrite: false, currentOperand: null };\n      }\n      if (state.currentOperand == null) return state;\n      if (state.currentOperand.lenght == 1)\n        return { ...state, currentOperand: null };\n      return {\n        ...state,\n        currentOperand: state.currentOperand.slice(0, -1),\n      };\n  }\n}\nfunction evaluate({ currentOperand, previousOperand, operation }) {\n  const prev = parseFloat(previousOperand);\n  const current = parseFloat(currentOperand);\n  if (isNaN(prev) || isNaN(current)) {\n    return \"\";\n  }\n  let computation = \"\";\n  switch (operation) {\n    case \"+\":\n      computation = prev + current;\n      break;\n    case \"-\":\n      computation = prev - current;\n      break;\n    case \"*\":\n      computation = prev * current;\n      break;\n    case \"%\":\n      computation = prev / current;\n      break;\n  }\n  return computation.toString();\n}\nfunction App() {\n  const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(\n    reducer,\n    {}\n  );\n  return (\n    <div className=\"calculator-grid\">\n      <div className=\"output\">\n        <div className=\"previous-operand\">\n          {previousOperand}\n          {operation}\n        </div>\n        <div className=\"current-operand\">{currentOperand}</div>\n      </div>\n      <button\n        className=\"span-two\"\n        onClick={() => {\n          dispatch({ type: ACTIONS.CLEAR });\n        }}\n      >\n        AC\n      </button>\n      <button\n        onClick={() => {\n          dispatch({ type: ACTIONS.DELETE_DIGIT });\n        }}\n      >\n        DEL\n      </button>\n      <OperationButton operation=\"%\" dispatch={dispatch} />\n      <DigitButton digit=\"1\" dispatch={dispatch} />\n      <DigitButton digit=\"2\" dispatch={dispatch} />\n      <DigitButton digit=\"3\" dispatch={dispatch} />\n      <OperationButton operation=\"*\" dispatch={dispatch} />\n      <DigitButton digit=\"4\" dispatch={dispatch} />\n      <DigitButton digit=\"5\" dispatch={dispatch} />\n      <DigitButton digit=\"6\" dispatch={dispatch} />\n      <OperationButton operation=\"+\" dispatch={dispatch} />\n      <DigitButton digit=\"7\" dispatch={dispatch} />\n      <DigitButton digit=\"8\" dispatch={dispatch} />\n      <DigitButton digit=\"9\" dispatch={dispatch} />\n      <OperationButton operation=\"-\" dispatch={dispatch} />\n      <DigitButton digit=\".\" dispatch={dispatch} />\n      <DigitButton digit=\"0\" dispatch={dispatch} />\n      <button\n        className=\"span-two\"\n        onClick={() => {\n          dispatch({ type: ACTIONS.EVALUATE });\n        }}\n      >\n        =\n      </button>\n    </div>\n  );\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.scss\"\nimport App from \"./App\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}